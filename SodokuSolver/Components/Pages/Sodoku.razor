@page "/sodoku"
@rendermode InteractiveServer

<PageTitle>Sodoku Solver</PageTitle>

<h1>Sodoku Solver</h1>

<table>
    <tbody>
        @for (int i = 0; i < sodokuBoard.MaxSize; i++)
        {
            <tr>
            @for (int j = 0; j < sodokuBoard.MaxSize; j++)
            {
                var iCopy = i;
                var jCopy = j;
                var index = i + j;
                var localCell = sodokuBoard.FlatBoard[index];
                if (localCell == null) {
                    var quadrant = i / sodokuBoard.MaxSize + j / sodokuBoard.MaxSize;
                    sodokuBoard.FlatBoard[index] = new SodokuCell(i, j, quadrant);
                    localCell = sodokuBoard.FlatBoard[index];
                }
                <td>
                    <input 
                        id="@($"Board{i}{j}")"
                        type="number" min="0" max="9" step="1"
                        @bind-value:event="onInput"
                        @bind-value="sodokuBoard.FlatBoard[index].Value"
                    />
                </td>
            }
            </tr>
        }
    </tbody>
</table>
<hr/>
<button class="btn btn-primary" @onclick="ClearBoard">Clear Board</button>
<button class="btn btn-primary" @onclick="LockBoard">Lock Board</button>
<button class="btn btn-primary" @onclick="SolveBoard">Solve Board</button>

@code {
    public class SodokuBoard
    {
        public int MaxSize = 9;
        public int[,] Board { get; set; } = new int[9,9];
        public SodokuCell[] FlatBoard { get; set; } = new SodokuCell[81];
        public SodokuCell[,] Cells { get; set; } = new SodokuCell[9,9];
        public async Task EventUpdateBoard(ChangeEventArgs e, int row, int column)
        {
            if (e.Value != null) {
                if (e.Value.ToString() != null) {
                    int value = Int32.Parse(e.Value.ToString());
                    Boolean changed = UpdateBoard(value, row, column);
                    if (!changed) {
                        var tempValue = Board[row,column];
                        Board[row,column] = 0;
                        await Task.Yield();
                        Board[row,column] = tempValue;
                    }
                }
            }
        }

        public async Task FocusUpdateBoard(FocusEventArgs f, int row, int column)
        {
            if(f.ToString() != null) {
                int value = Int32.Parse(f.ToString());
                Boolean changed = UpdateBoard(value, row, column);
                if (!changed) {
                    var tempValue = Board[row,column];
                    Board[row,column] = 0;
                    await Task.Yield();
                    Board[row,column] = tempValue;
                }
            }
        }

        public Boolean UpdateBoard(int value, int row, int column)
        {
            Boolean changed = false;
            int oldValue = Board[row,column];
            FlatBoard[row+column].Value = value;
            if (!ValidateBoard()) {
                FlatBoard[row+column].Value = oldValue;
            } else {
                Board[row,column] = value;
                Cells[row,column].Value = value;
                changed = true;
            }
            return changed;
        }

        public Boolean ValidateBoard()
        {
            Boolean isValid = false;
            for (int i = 0; i < MaxSize; i++) {
                for (int j = 0; j < MaxSize; j++) {

                }
            }
            return isValid;
        }

        public SodokuBoard(int size)
        {
            this.MaxSize = size * size;
            for (int i = 0; i < MaxSize; i++) {
                for (int j = 0; j < MaxSize; j++) {
                    int quadrant = i / MaxSize + j / MaxSize;
                    Cells[i,j] = new SodokuCell(i, j, quadrant);
                    Board[i,j] = 0;
                    FlatBoard[i+j] = Cells[i,j];
                }
            }
        }
    }
    public class SodokuCell
    {
        public int Value { get; set; } = 0;
        public int Guess { get; set; } = 0;
        public int Quadrant { get; set; } = 0;
        public int Row { get; set; } = -1;
        public int Column { get; set; } = -1;
        public Boolean Locked { get; set; } = false;
        public SodokuCell(int row, int column, int quadrant)
        {
            this.Row = row;
            this.Column = column;
            this.Quadrant = quadrant;
        }
        public SodokuCell()
        {
        }
    }
    [Parameter]
    public int Size { get; set; } = 3;
    public SodokuBoard sodokuBoard = new SodokuBoard(3);

    private void ClearBoard()
    {
        sodokuBoard = new SodokuBoard(Size);
    }

    private void LockBoard()
    {

    }

    private void SolveBoard()
    {

    }
}